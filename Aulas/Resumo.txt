-> Criando um novo projeto Next: npx create-next-app nome_da_pasta
-> Estrutura de Pastas:
  - app:	App Router
  - pages:	Roteador de páginas
  - public:	Ativos estáticos a serem exibidos
  - src:	Pasta de origem do aplicativo opcional
-> O ao iniciar o npx create, possui duas opções para roteamento das páginas: App Router(dentro da pasta app é criada subpastas e arquivos com o caminho da rota que vai ser seguido: O appdiretório funciona junto com o pagesdiretório para permitir a adoção incremental. Isso permite que você opte por algumas rotas de seu aplicativo para o novo comportamento enquanto mantém outras rotas no pagesdiretório para o comportamento anterior. IMPORTANTE: É bom saber : o App Router tem prioridade sobre o Pages Router. Rotas entre diretórios não devem resolver para o mesmo caminho de URL e causarão um erro de tempo de compilação para evitar um conflito. ) e o Pages Router( é criada uma pasta Pages, e dentro dessa pasta todos os seus componentes vai ser uma rota diferente, a rota vai ser exatamente o nome do componente, a page com o nome index será a principal).
-> Erro Babel: substituir no arquivo .eslintrc.json : {      
  "extends": ["next/babel", "next/core-web-vitals"]
} então ctrl + shift + pe procure por ESLint: Restart ESLint Server.
-> Utilizando AppRouter:
  - O arquivo chamado page.tsx dentro do da pasta app é considerado a rota inicial: /
  - Ao criar uma nova pasta deverá criar o arquivo page.tsx quer será o index daquela pasta(rota).
  - O page deve ser exportado como default para que a rota funcione.
  - O app diretório deve incluir um layout raiz. O layout raiz deve definir <html>e <body>marcar, pois o Next.js não os cria automaticamente.
-> Tipos de Renderização:
  - SSR (renderização do lado do servidor):  O SSR descreve o processo de pré-renderização da página no servidor, que é gerado a cada solicitação do usuário(ou seja, a pagina é entregue somente no html e css para melhorar a velocidade de carregamento, logo apos com a chegada do js que a página se torna interativa). Quando a página pré-renderizada chega ao navegador, o código JavaScript é executado para tornar a página interativa. Todo esse processo faz com que a velocidade de carregamento seja mais rápida. Também torna mais fácil e preferível usar a renderização do lado do servidor para aplicativos que dependem de SEO.
  - SSG (geração de site estático): O SSG descreve o processo de construção de sites que são renderizados no momento da construção. A saída é um arquivo HTML, recursos como JavaScript e CSS e alguns outros arquivos estáticos. Ao usar SSG com Next.js, a página é pré-renderizada no tempo de compilação. Isso significa que o usuário não terá que esperar a página carregar no navegador; a página será simplesmente renderizada.
-> Novos Componentes: é possivel criar componentes da mesma maneira que em React, uma convenção muito utilizada é criar uma pasta components. Não misturar pages com componentes.
-> Componente de Layout: layout é uma interface do usuário compartilhada entre várias páginas. Na navegação, os layouts preservam o estado, permanecem interativos e não são renderizados novamente. Os layouts também podem ser aninhados. OBS: é como se tivesse utilizando o outlet do react router.
  - Usando o AppRouter: O layout raiz é definido no nível superior do appdiretório e se aplica a todas as rotas. É obrigatório ter pelo menos o layout raiz, deve definir <html>e <body>.
  - Usando o Pages: será utilizado o arquivo _app
-> Há duas formas simples de estilizar a aplicação Next:
  - Estilos globais: podem ser adicionados no arquivo global.css
  - CSS Modules: para componentes e páginas. Basta criar um arquivo .css com o nome do componente, exemplo: Home.module.css -> importação: import styles from '../../styles/Home.module.css' -> para utilizar: styles.nome_classe na tag especifica.
-> Metadata: para melhor SEO e compartilhamento na web.
  - Existem duas metatags padrão que sempre são adicionadas, mesmo que uma rota não defina metadados, são elas: charset e viewport. É bom saber : você pode substituir a viewportmetatag padrão.
  - https://www.builder.io/blog/routing-seo-metadata-nextjs-13
-> Inserindo Assets: são imagens estaticas, ficam sempre na pasta public. Deve se criar a pasta images dentro de public, e colocar as imagens lá dentro.
-> Favicon: há duas opções:
  - Renomeiar o arquivo para icon.ico e deixar ele ja pasta app(AppRoute).
  - Renomeiar o arquivo para exemplo: favic.ico e deixar ele na pasta public e utilizar a tag Head juntamente com:   icons: {
    icon: '/favic.ico',
  } -> metadata layoutRaiz
